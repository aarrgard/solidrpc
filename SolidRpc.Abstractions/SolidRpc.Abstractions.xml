<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolidRpc.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions">
            <summary>
            Extension methods fro the http request
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSingletonIfMissing``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the service if type is missing in the collection.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSingletonIfMissing``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds the factory if it is missing.
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="services"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Adds the rpc services
            </summary>
            <param name="services"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcServiceProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Returns the service provider for specified service.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="services"></param>
            <param name="mustExist"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Boolean)">
            <summary>
            Returns the service provider for specified service.
            </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <param name="mustExist"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.RegisterSingletonService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Registers a singleton service provider.
            </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcSingletonServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the singleton services
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcContentStore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Returns the static content provider.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcOpenApiParser(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Returns the static content provider.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Reflection.Assembly,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures all the interfaces in supplied assembly
            </summary>
            <param name="sc"></param>
            <param name="interfaceAssembly"></param>
            <param name="implementationAssembly"></param>
            <param name="configurator"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="interfaze"></param>
            <param name="impl"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcSingletonBindings``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="impl"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.MethodInfo,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the suppllied method so that it is exposed through the .net core http binding.
            </summary>
            <param name="sc"></param>
            <param name="mi"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer">
            <summary>
            Interface that can be implemented to resolve the base uri.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer.TransformUriAsync(System.Uri,System.Reflection.MethodInfo)">
            <summary>
            Returns the uri for supplied method. If no method is supplied
            the base address for the open api spec is determined.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument">
            <summary>
            Represents a method argument.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Name">
            <summary>
            Returns the name of the argument.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ArgumentPath">
            <summary>
            Specifies where this argument is located.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Location">
            <summary>
            The location of the argument, May be either:
            * path
            * query
            * header
            * formData
            * body (one)
            * body-inline(several)
            The formData, body and body-inline cannot be combined.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ParameterInfo">
            <summary>
            The parameter info.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Optional">
            <summary>
            Specifies if this argument is optional
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.BindArgumentAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Object)">
            <summary>
            Binds this argument to the supplied request.
            </summary>
            <param name="request"></param>
            <param name="val"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ExtractArgumentAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest)">
            <summary>
            Extracts the arguments from supplied request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder">
            <summary>
            The method binder is responsible for binding MethodInfo structures to a swagger spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.OpenApiSpec">
            <summary>
            The open api spec that this binder gets its information from
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.Assembly">
            <summary>
            The associated assembly.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.MethodBindings">
            <summary>
            Returns all the mapped methods
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.CreateMethodBinding(System.Reflection.MethodInfo,SolidRpc.Abstractions.OpenApi.Binder.MethodAddressTransformer,System.Nullable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns the method info from supplied specification.
            </summary>
            <param name="methodInfo"></param>
            <param name="baseUriTransformer"></param>
            <param name="securityKey"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore">
            <summary>
            A store that contains bindings for an assebly and open api configuration.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetOpenApiSpecResolver(System.Reflection.Assembly)">
            <summary>
            Returns the open api spec resolver for supplied assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.MethodBinders">
            <summary>
            Returns all the method binders.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.CreateMethodBinding(System.String,System.Boolean,System.Reflection.MethodInfo,SolidRpc.Abstractions.OpenApi.Binder.MethodAddressTransformer)">
            <summary>
            Returns the method info for supplied open api spec and reflected method
            </summary>
            <param name="openApiSpec">The openapi spec to use. If null we search the assembly.</param>
            <param name="localApi">Does the method have a local implementation</param>
            <param name="methodInfo">The method to creata a binding for</param>
            <param name="baseUriTransformer"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetUrlAsync``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean)">
            <summary>
            Returns the uri to invoke the supplied method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="includeQueryString">Shoukd the query string be included</param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetMethodBinding``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Returns the method info for the matching expressiong.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetMethodBinding(System.Reflection.MethodInfo)">
            <summary>
            Returns the method info for the supplied method.
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding">
            <summary>
            Represents the method info structure in a swagger specification.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.MethodBinder">
            <summary>
            The binder that this method information belongs to.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.MethodInfo">
            <summary>
            The method info structure this binding represents.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.IsLocal">
            <summary>
            Returns true if the underlying method ends in an 
            InvocationAdvice. False otherwise.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.IsEnabled">
            <summary>
            Returns true if this method is enabled
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.SecurityKey">
            <summary>
            Returns the security key needed for this invocation.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.OperationId">
            <summary>
            Returns the operation id for this method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Method">
            <summary>
            The method(POST,GET,HEAD,etc) to use when activating the method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Path">
            <summary>
            The path relative to the base path of the binder.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Address">
            <summary>
            The base address to this method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Arguments">
            <summary>
            All the arguments.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.BindArgumentsAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Object[])">
            <summary>
            Binds the arguments to the supplied request according to
            the swagger spec.
            </summary>
            <param name="request"></param>
            <param name="args"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.ExtractArgumentsAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest)">
            <summary>
            Extracts the arguments from supplied request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.BindResponseAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpResponse,System.Object,System.Type)">
            <summary>
            Binds the response
            </summary>
            <param name="response"></param>
            <param name="obj"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.ExtractResponse``1(SolidRpc.Abstractions.OpenApi.Http.IHttpResponse)">
            <summary>
            Returns the respone.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.MethodAddressTransformer">
            <summary>
            The method used to transform uri:s
            </summary>
            <param name="serviceProvider"></param>
            <param name="originalUri"></param>
            <param name="methodInfo">The method to resolve the uri for(may be null)</param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.MethodHeadersTransformer">
            <summary>
            The method used to transform headers
            </summary>
            <param name="serviceProvider"></param>
            <param name="headers"></param>
            <param name="methodInfo">The method to transform the headers for</param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest">
            <summary>
            Interface that we use to access the data in the Http request
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.CancellationToken">
            <summary>
            Returns the cancellation token
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Method">
            <summary>
            The method to use
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Scheme">
            <summary>
            The scheme to use.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.HostAndPort">
            <summary>
            The host to use.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.PathData">
            <summary>
            The path data. This information is extracted/populated by the binder. No
            need to populate from implementation.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Headers">
            <summary>
            The request headers
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Query">
            <summary>
            The request query string
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.ContentType">
            <summary>
            The content type of the body data.
            
            When composing a request a call that consumes 
             - "application/x-www-form-urlencoded"
             - "multipart/form-data"
            will create the request accordingly.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.BodyData">
            <summary>
            The data in the body. Check the ContentType to 
            determine how the data should be transmitted.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData">
            <summary>
            Represents some request data.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.ContentType">
            <summary>
            The content type - stored in the Content-Type header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Encoding">
            <summary>
            The encoding - stored in the Content-Type header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Filename">
            <summary>
            File filename - usually stored in the Content-Disposition header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Name">
            <summary>
            The name of the data
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.GetStringValue">
            <summary>
            The string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.GetBinaryValue">
            <summary>
            Returns the binary value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.As``1">
            <summary>
            Returns the data as supplied type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse">
            <summary>
            Interface that we use to access the data in the Http response
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.StatusCode">
            <summary>
            Returns the status code
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.ContentType">
            <summary>
            Returns the content type - stored in the Content-Type header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.Filename">
            <summary>
            The filename - stored in Content-Disposition header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.Location">
            <summary>
            The location - stored in Location header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.LastModified">
            <summary>
            Accessor for the "Last-Modified" header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.ResponseStream">
            <summary>
            Returns the response stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker">
            <summary>
            Interface that exposes functionality to invoke a method in an IoC container.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.MethodBinderStore">
            <summary>
            The store that contains all the bindings
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.InvokeAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Threading.CancellationToken)">
            <summary>
            Invokes the supplied request.
            </summary>
            <param name="request"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.InvokeAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding,System.Threading.CancellationToken)">
            <summary>
            Invokes the supplied request.
            </summary>
            <param name="request"></param>
            <param name="methodInfo"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.InvokeInternalAsync(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invokes the specified method with supplied arguments. If there is a SecurityKey specified for the method 
            it is passed along as an invocation parameter.
            </summary>
            <param name="methodInfo"></param>
            <param name="args"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker`1">
            <summary>
            Invokes a method on an object in the service provider.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker`1.InvokeInternalAsync``1(System.Linq.Expressions.Expression{System.Action{`0}},System.Threading.CancellationToken)">
            <summary>
            Invokes the specified method with supplied arguments. If there is a SecurityKey specified for the method 
            it is passed along as an invocation parameter.
            </summary>
            <param name="action"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker`1.InvokeInternalAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Invokes the specified method with supplied arguments. If there is a SecurityKey specified for the method 
            it is passed along as an invocation parameter.
            </summary>
            <param name="func"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation">
            <summary>
            Represents an operation.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.OperationId">
            <summary>
            Returns the operation id.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.AddSolidRpcSecurityKey(System.String)">
            <summary>
            Sets 
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser">
            <summary>
            Interface used to handle open api specs
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.ParseSpec(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver,System.String,System.String)">
            <summary>
            Parses upplied json to an open api spec.
            </summary>
            <param name="specResolver">The spec resolver.</param>
            <param name="address">the address of the json to parse.</param>
            <param name="json">The json to parse</param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.WriteSwaggerSpec(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec,System.Boolean)">
            <summary>
            Writes the supplied openapi specification as a string
            </summary>
            <param name="openApiSpec"></param>
            <param name="formatted"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.CreateSpecification(System.Type[])">
            <summary>
            Creates a specification that contains the methods in supplied types.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.CreateSpecification(System.Reflection.MethodInfo[])">
            <summary>
            Creates a specification that contains the specified method.
            </summary>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec">
            <summary>
            Interface implemented by the SwaggerObject structures in the model.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Clone">
            <summary>
            Clones this open api spec
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiSpecResolver">
            <summary>
            Returns the spec resolver used to find this spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiSpecResolverAddress">
            <summary>
            Returns the address in the resolver where we can find this spec
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetOpenApiSpecResolver(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver,System.String)">
            <summary>
            Sets the openapi resolver and the address of this specification.
            </summary>
            <param name="openApiSpecResolver"></param>
            <param name="openApiSpecResolverAddress"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiVersion">
            <summary>
            The openapi version of this specification
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Title">
            <summary>
            Returns the title of the spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.BaseAddress">
            <summary>
            Returns the base address. This is the combination of
            Scheme, Host, Port and BasePath.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Operations">
            <summary>
            REturns all the operations in this specificaiton
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetBaseAddress(System.Uri)">
            <summary>
            Updates the spec so that the host and port are from the supplied address.
            If the root address matches this spec then this spec is returned. Otherwise
            this spec is clone:ed and updated.
            </summary>
            <param name="rootAddress"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.WriteAsJsonString(System.Boolean)">
            <summary>
            Writes this spec as a json string
            </summary>
            <param name="formatted"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetExternalDoc(System.String,System.Uri)">
            <summary>
            Sets the associated external documentation.
            </summary>
            <param name="description"></param>
            <param name="indexHtmlPath"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.RemoveRelativeRefPaths">
            <summary>
            Removes all the relative paths in the refs. ie. a reference
            to ../../test.json#/definitions/x will become test.json#/definitions/x
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.RemoveOperation(SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation)">
            <summary>
            Removes the supplied operation from this specification.
            </summary>
            <param name="op"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver">
            <summary>
            This interface defines the logic assocated
            with resolving referenced specifications.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver.OpenApiParser">
            <summary>
            Returns the parser that parses the resolved specifications.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver.TryResolveApiSpec(System.String,SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec@,System.String)">
            <summary>
            Resolves the specification at supplied address.
            </summary>
            <param name="address"></param>
            <param name="openApiSpec"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig">
            <summary>
            Interface used to determine how the azure function
            settings should be.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig.AuthLevel">
            <summary>
            The authorization level.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3">
            <summary>
            
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TMethod"></typeparam>
            <typeparam name="TAdvice"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3.Configure(SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3.Handle(System.Func{System.Threading.Tasks.Task{`2}},SolidProxy.Core.Proxy.ISolidProxyInvocation{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig">
            <summary>
            Configures the bindings for the rpc proxy.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.OpenApiSpec">
            <summary>
            Sets the open api specification to use. If not set the specification matching
            the method name or assembly name where the method is defined will be used.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.SecurityKey">
            <summary>
            If this key is set it needs to be specified in the invocation
            properties in order for the invocation to be authorized on the server side.
            If the key is present on the client side it is added to call so that
            the invocation is authorized.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.MethodAddressTransformer">
            <summary>
            The method to transform the Uri. This delegate is invoked to determine
            the base Uri for the service. Supplied uri is the one obtained from
            the openapi config.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.MethodHeadersTransformer">
            <summary>
            The http headers to add to the invocations
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SecurityAttribute">
            <summary>
            The security attribute defines what permissions that are required to
            accesss the data in these interfaces
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.SecurityAttribute.#ctor(System.String[])">
            <summary>
            The permissions required to access this resource
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.SecurityAttribute.Public">
            <summary>
            Specifies if this resource is public(ie no permissions required)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SecurityAttribute.Permissions">
            <summary>
            The permissions required to access this resource
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Security.SolidRpcHostPermission">
            <summary>
            This permission grants access to some of the solid rpc host functionality.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Serialization.ISerializer">
            <summary>
            Defines the logic to serialize object into a wire format 
            such as xml or json.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.ISerializer.ContentType">
            <summary>
            Returns the content type for this serializer
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.ISerializer.CharSet">
            <summary>
            The charset for this serializer
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializer.Serialize(System.IO.Stream,System.Type,System.Object,System.Boolean)">
            <summary>
            Serializes an object of specified type.
            </summary>
            <param name="stream"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="prettyFormat"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializer.Deserialize(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="stream"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Serialization.ISerializerFactory">
            <summary>
            Implements logic to create seralizers.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.GetSerializer(System.String,System.Text.Encoding)">
            <summary>
            Gets the serializer for suplied media type.
            </summary>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToString``1(System.String@,``0,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromString``1(System.String,``0@,System.String,System.Text.Encoding)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToString(System.String@,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromString(System.String,System.Type,System.Object@,System.String,System.Text.Encoding)">
            <summary>
            Deserializes an object from a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToStream(System.IO.Stream,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@,System.String,System.Text.Encoding)">
            <summary>
            Deserializes an object from a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToFileType(System.Object,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes an object to a file instance type.
            </summary>
            <param name="fileTypeInstance"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToFileType``1(System.Object,``0,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileTypeInstance"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromFileType``1(System.Object,``0@)">
            <summary>
            Writes an object to a file instance type.
            </summary>
            <param name="fileTypeInstance"></param>
            <param name="o"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcContentHandler">
            <summary>
            The content handler uses the ISolidRpcContentStore to deliver static or proxied content.
            
            This handler can be invoked from a configured proxy or mapped directly in a .Net Core Handler.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.GetContent(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the content for supplied path.
            
            Note that the path is marked as optional(default value set). This is so that the parameter
            is placed in the query string instead of path.
            </summary>
            <param name="path">The path to get the content for</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.PathPrefixes">
            <summary>
            Returns all the path prefixes. If content is added by using relative
            paths then all the assemly base paths are returned from this property.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.GetPathMappingsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns all the path mappings.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcContentStore">
            <summary>
            The implementation of this interface is a singleton service
            that provides access to static content. 
            
            Static resources may be configured(added) during setup of the IoC container.
            
            If no path prefix is specified all the registered paths for the assembly are used at
            runtime to determine if the content should be delivered.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentStore.AddContent(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Adds a content mapping. 
            </summary>
            <param name="contentAssembly">The assebly that contains the content</param>
            <param name="assemblyRelativeName">The string to append to the name of the assembly. All resoures that start with that name are added</param>
            <param name="pathPrefix">The absolute path to use to obtain the content.</param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentStore.AddContent(System.Reflection.Assembly,System.String,System.Reflection.Assembly)">
            <summary>
            Adds a content mapping. 
            </summary>
            <param name="contentAssembly">The assebly that contains the content</param>
            <param name="assemblyRelativeName">The string to append to the name of the assembly. All resoures that start with that name are added</param>
            <param name="apiAssembly">The interface assembly containing the openapi spec.</param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentStore.AddMapping(System.String,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{System.Uri}})">
            <summary>
            Use this method to expose a static path to a dynamic resource.
            </summary>
            <param name="path"></param>
            <param name="mapping"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcHost">
            <summary>
            Represents a solid rpc host.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.GetHostId(System.Threading.CancellationToken)">
            <summary>
            Returns the id of this host
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.GetHostConfiguration(System.Threading.CancellationToken)">
            <summary>
            Returns the host configuration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.IsAlive(System.Threading.CancellationToken)">
            <summary>
            Function that determines if the host is alive.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute">
            <summary>
            Attribute that can be set on the SolidRpc hosting assemblies to define the 
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.GetSingletonServices(System.Reflection.Assembly)">
            <summary>
            Returns all the services registered in specififed assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.GetImplemenationType(System.Type)">
            <summary>
            Returns the implementation type for suplied generic type.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.GetImplemenationType``1">
            <summary>
            Returns the implementation type for suplied generic type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.CreateInstance``1">
            <summary>
            Constructs a new instance of specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Constructs a new attribute
            </summary>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.ServiceType">
            <summary>
            The interface type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcAbstractionProviderAttribute.ImplementationType">
            <summary>
            The implementation type.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcConstants">
            <summary>
            Contains some constants 
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcConstants.OpenApiWordSeparators">
            <summary>
            characters to be used when splittung up words in a openapi spec
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContent">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.Content">
            <summary>
            The file content.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.CharSet">
            <summary>
            The content charset
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.ContentType">
            <summary>
            The content type.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.LastModified">
            <summary>
            The last modified date of the resource.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.Location">
            <summary>
            The location of the content
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContentNotFoundException">
            <summary>
            Raised when the file content is not found
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.FileContentNotFoundException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentNotFoundException.#ctor">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContentTemplate">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.PropertyTypes">
            <summary>
            The properties 
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.RequiredProps">
            <summary>
            The required properties
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.IsFileType(System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Determines if the supplied type is a file type based on the name and/or properties.
            </summary>
            <param name="typeName"></param>
            <param name="propertyTypes"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.GetTemplate(System.Type)">
            <summary>
            REturns the template spec for supplied type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance
            </summary>
            <param name="otherType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds support for plain streams
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetContent">
            <summary>
            Sets the content on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetContent">
            <summary>
            Gets the content from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetCharSet">
            <summary>
            Sets the charset on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetCharSet">
            <summary>
            Gets the charset from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetContentType">
            <summary>
            Sets the content type on the template  copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetContentType">
            <summary>
            Returns the content type from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetFileName">
            <summary>
            Sets the filename on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetFileName">
            <summary>
            Returns the filename from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetLastModified">
            <summary>
            Sets the last modified on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetLastModified">
            <summary>
            Returns the last modified from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetLocation">
            <summary>
            Sets the location in the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetLocation">
            <summary>
            Returns the location from the template copy
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.HttpRequest">
            <summary>
            Represents a HttpRequest. We can use this type to create dynamic invocation
            handlers that intercepts all the data sent to it.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Method">
            <summary>
            The method(GET,POST,PUT,etc)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Uri">
            <summary>
            The uri
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Headers">
            <summary>
            The headers
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Query">
            <summary>
            The query parameters
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Body">
            <summary>
            The body.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.HttpRequestTemplate">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.PropertyTypes">
            <summary>
            The properties 
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.RequiredProps">
            <summary>
            The required properties
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetTemplate(System.Type)">
            <summary>
            Returns the template spec for supplied type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.IsHttpRequestType(System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Returns true if specified information matches a http request type.
            </summary>
            <param name="typeName"></param>
            <param name="propertyTypes"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Ensures that out type has correct name.
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance
            </summary>
            <param name="otherType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetMethod">
            <summary>
            Sets the method on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetMethod">
            <summary>
            Gets the conmethodtent from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetUri">
            <summary>
            Sets the uri on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetUri">
            <summary>
            Gets the uri from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetHeaders">
            <summary>
            Sets the headers on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetHeaders">
            <summary>
            Gets the headers from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetQuery">
            <summary>
            Sets the query on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetQuery">
            <summary>
            Gets the query from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetBody">
            <summary>
            Sets the query on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetBody">
            <summary>
            Gets the query from the template copy
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.NameValuePair">
            <summary>
            Represents a name/value pair
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.NameValuePair.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.NameValuePair.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.UnauthorizedException">
            <summary>
            Raised when the the method invocation is not allowed
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.UnauthorizedException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.UnauthorizedException.#ctor">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.UnauthorizedException.#ctor(System.String)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.TypeTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate.#ctor(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new instance
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds support for subclasses to override logic.
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.IsTemplateType">
            <summary>
            Returns true if this is a template type.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.TypeTemplate`1">
            <summary>
            The type template can be used to access similar types.
            </summary>
            <typeparam name="TTemplate"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate`1.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Contains extension methods for the Type
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsFileContent(System.Type)">
            <summary>
            Returns true if the type is a binary template type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsHttpRequest(System.Type)">
            <summary>
            Returns true if the type is a HttpRequest template type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsEnumType(System.Type,System.Type@)">
            <summary>
            Returns true if the type is an enum
            </summary>
            <param name="type"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsTaskType(System.Type,System.Type@)">
            <summary>
            Returns true if supplied tyoe is a task type.
            </summary>
            <param name="type"></param>
            <param name="taskType"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullableType(System.Type,System.Type@)">
            <summary>
            Returns true if supplied type is a nullable type.
            </summary>
            <param name="type"></param>
            <param name="nullableType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
