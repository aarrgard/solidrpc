<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolidRpc.Abstractions</name>
    </assembly>
    <members>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestDataExtensions">
            <summary>
            Contains extension methods for the enums
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestDataExtensions.GetStringValue(System.Collections.Generic.IEnumerable{SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData},System.String)">
            <summary>
            Returns true if supplied type is a nullable type.
            </summary>
            <param name="type"></param>
            <param name="nullableType"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest">
            <summary>
            Interface that we use to access the data in the Http request
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.CancellationToken">
            <summary>
            Returns the cancellation token
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Method">
            <summary>
            The method to use
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Scheme">
            <summary>
            The scheme to use.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.HostAndPort">
            <summary>
            The host to use.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.PathData">
            <summary>
            The path data. This information is extracted/populated by the binder. No
            need to populate from implementation.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Headers">
            <summary>
            The request headers
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.Query">
            <summary>
            The request query string
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.ContentType">
            <summary>
            The content type of the body data.
            
            When composing a request a call that consumes 
             - "application/x-www-form-urlencoded"
             - "multipart/form-data"
             - "application/json"
            will create the request accordingly.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequest.BodyData">
            <summary>
            The data in the body. Check the ContentType to 
            determine how the data should be transmitted.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData">
            <summary>
            Represents some request data.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.ContentType">
            <summary>
            The content type - stored in the Content-Type header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Encoding">
            <summary>
            The encoding - stored in the Content-Type header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.ETag">
            <summary>
            The etag - stored in the ETag header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.LastModified">
            <summary>
            The last modified date
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.SetCookie">
            <summary>
            The content of the set cookie header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Filename">
            <summary>
            File filename - usually stored in the Content-Disposition header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.Name">
            <summary>
            The name of the data
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.GetStringValue">
            <summary>
            The string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.GetBinaryValue">
            <summary>
            Returns the binary value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IHttpRequestData.As``1">
            <summary>
            Returns the data as supplied type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse">
            <summary>
            Interface that we use to access the data in the Http response
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.StatusCode">
            <summary>
            Returns the status code
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.MediaType">
            <summary>
            Returns the media type - stored in the Content-Type header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.CharSet">
            <summary>
            Returns the char et - stored in the Content-Type header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.Filename">
            <summary>
            The filename - stored in Content-Disposition header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.Location">
            <summary>
            The location - stored in Location header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.ETag">
            <summary>
            The ETag - stored in Location header
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.LastModified">
            <summary>
            Accessor for the "Last-Modified" header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.SetCookie">
            <summary>
            Accessor for the "Set-Cookie" header.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.ResponseStream">
            <summary>
            Returns the response stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IHttpResponse.AdditionalHeaders">
            <summary>
            The additional headers
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker">
            <summary>
            Interface that exposes functionality to invoke a method in an IoC container.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.MethodBinderStore">
            <summary>
            The store that contains all the bindings
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.InvokeAsync(System.IServiceProvider,SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler,SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Threading.CancellationToken)">
            <summary>
            Invokes the supplied request.
            </summary>
            <param name="serviceProvider"></param>
            <param name="invocationSource"></param>
            <param name="request"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Http.IMethodInvoker.InvokeAsync(System.IServiceProvider,SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler,SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Collections.Generic.IEnumerable{SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding},System.Threading.CancellationToken)">
            <summary>
            Invokes the supplied request.
            </summary>
            <param name="serviceProvider"></param>
            <param name="invocationSource"></param>
            <param name="request"></param>
            <param name="methodBindings"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer">
            <summary>
            Interface that can be implemented to resolve the base uri.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer.AllowedCorsOrigins">
            <summary>
            Returns the allowed origins
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer.BaseAddress">
            <summary>
            Returns the base address for this server
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodAddressTransformer.TransformUri(System.Uri,System.Reflection.MethodInfo)">
            <summary>
            Returns the uri for supplied method. If no method is supplied
            the base address for the open api spec is determined.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument">
            <summary>
            Represents a method argument.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Name">
            <summary>
            Returns the name of the argument.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ArgumentPath">
            <summary>
            Specifies where this argument is located.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Location">
            <summary>
            The location of the argument, May be either:
            * path
            * query
            * header
            * formData
            * body (one)
            * body-inline(several)
            The formData, body and body-inline cannot be combined.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ParameterInfo">
            <summary>
            The parameter info.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.Optional">
            <summary>
            Specifies if this argument is optional
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.BindArgumentAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Object)">
            <summary>
            Binds this argument to the supplied request.
            </summary>
            <param name="request"></param>
            <param name="val"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodArgument.ExtractArgumentAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest)">
            <summary>
            Extracts the arguments from supplied request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder">
            <summary>
            The method binder is responsible for binding MethodInfo structures to a swagger spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.ServiceProvider">
            <summary>
            The service provider.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.OpenApiSpec">
            <summary>
            The open api spec that this binder gets its information from
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.Assembly">
            <summary>
            The associated assembly.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.HostedAddress">
            <summary>
            This is the base address for this assembly. It has
            been transformed by the registered UrlTransformer to 
            match the current hosting setting.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.MethodBindings">
            <summary>
            Returns all the mapped methods
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinder.CreateMethodBindings(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{SolidRpc.Abstractions.OpenApi.Transport.ITransport})">
            <summary>
            Returns the method info from supplied specification.
            </summary>
            <param name="methodInfo"></param>
            <param name="transports"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore">
            <summary>
            A store that contains bindings for an assebly and open api configuration.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetOpenApiSpecResolver(System.Reflection.Assembly)">
            <summary>
            Returns the open api spec resolver for supplied assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.MethodBinders">
            <summary>
            Returns all the method binders.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.CreateMethodBindings(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{SolidRpc.Abstractions.OpenApi.Transport.ITransport})">
            <summary>
            Returns the method info for supplied open api spec and reflected method
            </summary>
            <param name="openApiSpec">The openapi spec to use. If null we search the assembly.</param>
            <param name="methodInfo">The method to creata a binding for</param>
            <param name="transports"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetMethodBinding``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Returns the method info for the matching expressiong.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinderStore.GetMethodBinding(System.Reflection.MethodInfo)">
            <summary>
            Returns the method info for the supplied method.
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding">
            <summary>
            Represents the method info structure in a swagger specification.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.MethodBinder">
            <summary>
            The binder that this method information belongs to.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.MethodInfo">
            <summary>
            The method info structure this binding represents.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.GetSolidProxyConfig``1">
            <summary>
            Returns the configuration for specified advice.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.IsLocal">
            <summary>
            Returns true if the underlying method ends in an 
            InvocationAdvice. False otherwise.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.IsEnabled">
            <summary>
            Returns true if this method is enabled
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Transports">
            <summary>
            Returns the configured transports orderd by the invocation ordinal.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.OperationId">
            <summary>
            Returns the operation id for this method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Method">
            <summary>
            The method(POST,GET,HEAD,etc) to use when activating the method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.LocalPath">
            <summary>
            Returns the local path.(Represents a Uri.LocalPath ie not url encoded AbsolutePath)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.RelativePath">
            <summary>
            Returns the relative path of the operation. Relative to the base url and does not start with a slash.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.Arguments">
            <summary>
            All the arguments.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.BindUri(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Uri)">
            <summary>
            Creates a uri with the path and query arguments from the supplied request.
            </summary>
            <param name="request"></param>
            <param name="addressOverride"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.BindArgumentsAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Object[],System.Uri)">
            <summary>
            Binds the arguments to the supplied request according to
            the swagger spec.
            </summary>
            <param name="request"></param>
            <param name="args"></param>
            <param name="addressOverride"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.ExtractArgumentsAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest)">
            <summary>
            Extracts the arguments from supplied request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.BindResponseAsync(SolidRpc.Abstractions.OpenApi.Http.IHttpResponse,System.Object,System.Type)">
            <summary>
            Binds the response
            </summary>
            <param name="response"></param>
            <param name="obj"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.ExtractResponse``1(SolidRpc.Abstractions.OpenApi.Http.IHttpResponse)">
            <summary>
            Returns the respone.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding.ExtractResponse(System.Type,SolidRpc.Abstractions.OpenApi.Http.IHttpResponse)">
            <summary>
            Returns the respone.
            </summary>
            <param name="responseType"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Binder.IMethodBindingHandler">
            <summary>
            Interface that can be implemted in order to receive callbacks when a method binding has been created.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBindingHandler.BindingCreated(SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding)">
            <summary>
            Invoked the the binding store has created a binding.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Binder.IMethodBindingHandler.FlushQueuesAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes the queues.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker">
            <summary>
            Base interface for the invokers
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker.GetMethodBinding(System.Reflection.MethodInfo)">
            <summary>
            Returns the binding for supplied method.
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker.InvokeAsync(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Object},System.Func{SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions,SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions})">
            <summary>
            Invokes the specified method with supplied arguments.
            </summary>
            <param name="invocationOptions"></param>
            <param name="methodInfo"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1">
            <summary>
            Base interface for the invokers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.GetMethodBinding(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Invokes an action
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.GetMethodBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Executes a function
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.GetUriAsync(System.Linq.Expressions.Expression{System.Action{`0}},System.Boolean)">
            <summary>
            Returns the uri where we invoke the specified method.
            </summary>
            <param name="action"></param>
            <param name="includeQueryString"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.GetUriAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Returns the uri where we invoke the specified method.
            </summary>
            <param name="func"></param>
            <param name="includeQueryString"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.InvokeAsync(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions,SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions})">
            <summary>
            Invokes an action
            </summary>
            <param name="action"></param>
            <param name="invocationOptions"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.IInvoker`1.InvokeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions,SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions})">
            <summary>
            Executes a function
            </summary>
            <param name="func"></param>
            <param name="invocationOptions"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions">
            <summary>
            Contains additional invocation options.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.DefaultPreInvokeCallback(SolidRpc.Abstractions.OpenApi.Http.IHttpRequest)">
            <summary>
            The default pre invoke callback(Does nothing)
            </summary>
            <param name="httpReq"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.DefaultPostInvokeCallback(SolidRpc.Abstractions.OpenApi.Http.IHttpResponse)">
            <summary>
            The default post invoke callback(Does nothing)
            </summary>
            <param name="httpResp"></param>
            <returns></returns>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.MessagePriorityHigh">
            <summary>
            The high message prio
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.MessagePriorityNormal">
            <summary>
            The normal message prio
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.MessagePriorityLow">
            <summary>
            The low message prio
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.#ctor(System.String,System.Int32,System.String,System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Threading.Tasks.Task},System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpResponse,System.Threading.Tasks.Task})">
            <summary>
            Constructs a new instance
            </summary>
            <param name="transportType"></param>
            <param name="priority"></param>
            <param name="continuationToken"></param>
            <param name="preInvokeCallback"></param>
            <param name="postInvokeCallback"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.TransportType">
            <summary>
            The preferred transport type. Defaults to "Http"
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.Priority">
            <summary>
            The invocation priority.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.ContinuationToken">
            <summary>
            The continuation token.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.PreInvokeCallback">
            <summary>
            The pre invoke callback
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.PostInvokeCallback">
            <summary>
            The post invoke callback
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.SetPriority(System.Int32)">
            <summary>
            Returns a copy of this instance with another priority.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.SetContinuationToken(System.String)">
            <summary>
            Returns a copy of this instance with another continuation token.
            </summary>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.SetTransport(System.String)">
            <summary>
            Sets the transport to use.
            </summary>
            <param name="transportType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.AddPreInvokeCallback(System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Threading.Tasks.Task})">
            <summary>
            Adds a pre invokation callback
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions.AddPostInvokeCallback(System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpResponse,System.Threading.Tasks.Task})">
            <summary>
            Adds a pre invokation callback
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler">
            <summary>
            The invocation handler is responsible for doing
            the actual invokation
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler.TransportType">
            <summary>
            The transport type that this handler uses.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler.InvokeAsync(System.IServiceProvider,SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding,SolidRpc.Abstractions.OpenApi.Transport.ITransport,SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions,System.Threading.CancellationToken)">
            <summary>
            Invokes the method
            </summary>
            <param name="serviceProvider"></param>
            <param name="methodBinding"></param>
            <param name="transport"></param>
            <param name="httpReq"></param>
            <param name="invocationOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler.InvokeAsync(System.IServiceProvider,SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding,System.Object[],SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions)">
            <summary>
            Invokes the supplied method
            </summary>
            <param name="serviceProvider"></param>
            <param name="methodBinding"></param>
            <param name="target"></param>
            <param name="mi"></param>
            <param name="args"></param>
            <param name="invocationOptions"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler.InvokeAsync``1(System.IServiceProvider,SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding,SolidRpc.Abstractions.OpenApi.Transport.ITransport,System.Object[],SolidRpc.Abstractions.OpenApi.Invoker.InvocationOptions)">
            <summary>
            Sends the httpRequest representing the call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <param name="methodBinding"></param>
            <param name="transport"></param>
            <param name="args"></param>
            <param name="invocationOptions"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler`1">
            <summary>
            Represents a transport handler for supplied configuration
            </summary>
            <typeparam name="TConfig"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Invoker.ITransportHandler`1.Configure(SolidRpc.Abstractions.OpenApi.Binder.IMethodBinding,`0)">
            <summary>
            Configures the supplied transport
            </summary>
            <param name="methodBinding"></param>
            <param name="transport"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiModelBase">
            <summary>
            Represents a model object
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiModelBase.Parent">
            <summary>
            Returns the parent node.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiModelBase.SetParent(SolidRpc.Abstractions.OpenApi.Model.IOpenApiModelBase)">
            <summary>
            Sets the parent node.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation">
            <summary>
            Represents an operation.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.OperationId">
            <summary>
            Returns the operation id.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.Description">
            <summary>
            Returns the description
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.AddApiKeyAuth(System.String,System.String)">
            <summary>
            Sets the security key
            </summary>
            <param name="securityDefinitionName"></param>
            <param name="headerName"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation.AddOAuth2Auth(SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the oauth2 authentication
            </summary>
            <param name="authDoc"></param>
            <param name="flow"></param>
            <param name="scopes"></param>
            <returns>The security definition name for the supplied authority</returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser">
            <summary>
            Interface used to handle open api specs
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.ParseSpec(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver,System.String,System.String)">
            <summary>
            Parses upplied json to an open api spec.
            </summary>
            <param name="specResolver">The spec resolver.</param>
            <param name="address">the address of the json to parse.</param>
            <param name="json">The json to parse</param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.WriteSwaggerSpec(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec,System.Boolean)">
            <summary>
            Writes the supplied openapi specification as a string
            </summary>
            <param name="openApiSpec"></param>
            <param name="formatted"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.CreateSpecification(System.Type[])">
            <summary>
            Creates a specification that contains the methods in supplied types.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.CreateSpecification(System.Reflection.MethodInfo[])">
            <summary>
            Creates a specification that contains the specified method.
            </summary>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiParser.CloneNode``1(``0)">
            <summary>
            Uses the serializer to clone the supplied node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec">
            <summary>
            Interface implemented by the SwaggerObject structures in the model.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Clone">
            <summary>
            Clones this open api spec
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiSpecResolver">
            <summary>
            Returns the spec resolver used to find this spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiSpecResolverAddress">
            <summary>
            Returns the address in the resolver where we can find this spec
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetOpenApiSpecResolver(SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver,System.String)">
            <summary>
            Sets the openapi resolver and the address of this specification.
            </summary>
            <param name="openApiSpecResolver"></param>
            <param name="openApiSpecResolverAddress"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.OpenApiVersion">
            <summary>
            The openapi version of this specification
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Title">
            <summary>
            Returns the title of the spec.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.BaseAddress">
            <summary>
            Returns the base address. This is the combination of
            Scheme, Host, Port and BasePath.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.Operations">
            <summary>
            REturns all the operations in this specificaiton
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetBaseAddress(System.Uri)">
            <summary>
            Updates the spec so that the host and port are from the supplied address.
            If the root address matches this spec then this spec is returned. Otherwise
            this spec is clone:ed and updated.
            </summary>
            <param name="rootAddress"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.WriteAsJsonString(System.Boolean)">
            <summary>
            Writes this spec as a json string
            </summary>
            <param name="formatted"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.SetExternalDoc(System.String,System.Uri)">
            <summary>
            Sets the associated external documentation.
            </summary>
            <param name="description"></param>
            <param name="indexHtmlPath"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.RemoveRelativeRefPaths">
            <summary>
            Removes all the relative paths in the refs. ie. a reference
            to ../../test.json#/definitions/x will become test.json#/definitions/x
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec.RemoveOperation(SolidRpc.Abstractions.OpenApi.Model.IOpenApiOperation)">
            <summary>
            Removes the supplied operation from this specification.
            </summary>
            <param name="op"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver">
            <summary>
            This interface defines the logic assocated
            with resolving referenced specifications.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver.OpenApiParser">
            <summary>
            Returns the parser that parses the resolved specifications.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpecResolver.TryResolveApiSpec(System.String,SolidRpc.Abstractions.OpenApi.Model.IOpenApiSpec@,System.String)">
            <summary>
            Resolves the specification at supplied address.
            </summary>
            <param name="address"></param>
            <param name="openApiSpec"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority">
            <summary>
            Represents an authority
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.Authority">
            <summary>
            The uri of the issuer
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.AddDefaultScopes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a set of default scopes to request based on the supplied grant type.
            </summary>
            <param name="grantType"></param>
            <param name="scopes"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetScopes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the scopes for supplied grant type
            </summary>
            <param name="grantType"></param>
            <param name="additionalScopes"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetDiscoveryDocumentAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the discovery document
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetPrincipalAsync(System.String,System.Action{SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks},System.Threading.CancellationToken)">
            <summary>
            Returns the principal for supplied jwt token
            </summary>
            <param name="jwt"></param>
            <param name="tokenChecks"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetSigningKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the signing keys
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetClientJwtAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Returns the client jwt from the authority
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="scopes"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetUserJwtAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Returns the client jwt from the authority
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="scopes"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.GetCodeJwtToken(System.String,System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Returns a token from supplied code.
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="code"></param>
            <param name="timeout"></param>
            <param name="redirectUri"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.RefreshTokenAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Refreshes a token
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="refreshToken"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthority.RevokeTokenAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes the supplied token
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="token"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityFactory">
            <summary>
            Interface that provides access to an authority factory
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityFactory.GetAuthority(System.String)">
            <summary>
            Returns the authority @ supplied url. The supplied string will be used to validate the issuer in the tokens.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityFactory.GetLocalAuthority(System.String)">
            <summary>
            Returns the local authority @ supplied url. The supplied string will be used as the issuer when issuing tokens.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityLocal">
            <summary>
            Represents additional functionality for a local
            authority.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityLocal.CreateSigningKey">
            <summary>
            Creates a new set of signing keys for this authority.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityLocal.SetSigningKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2,System.String})">
            <summary>
            Sets the signing keys
            </summary>
            <param name="cert"></param>
            <param name="keyId"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityLocal.PrivateSigningKey">
            <summary>
            The signing key
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityLocal.CreateAccessTokenAsync(System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Creates the jwt token from supplied claims
            </summary>
            <param name="claimsIdentity"></param>
            <param name="expires"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks">
            <summary>
            Configures the token checks to perform
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.ValidateActor">
            <summary>
            should the actory be validated
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.ValidateAudience">
            <summary>
            Should the audience be validated
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.ValidateIssuer">
            <summary>
            Should the issuer be validated
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.ValidateIssuerSigningKey">
            <summary>
            Should the signing key ve validated
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.ValidateLifetime">
            <summary>
            Should the lifetime be validated
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.RequireExpirationTime">
            <summary>
            Do we require expiration time
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.RequireSignedTokens">
            <summary>
            Does the token have to be signed
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.OAuth2.IAuthorityTokenChecks.RequireAudience">
            <summary>
            Do we require an audience
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityKeyConfig">
            <summary>
            Configures a security key.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityKeyConfig.SecurityKey">
            <summary>
            If this key is set it needs to be specified in the invocation
            properties in order for the invocation to be authorized on the server side.
            If the key is present on the client side it is added to call so that
            the invocation is authorized.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config">
            <summary>
            Configures the OAuth2 security
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.OAuth2Authority">
            <summary>
            The authority uri. Add .well-known/openid-configuration to fetch the config. 
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.OAuth2ClientId">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.OAuth2ClientSecret">
            <summary>
            The client secret - will be used to authenticate the client if client credentials are used
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.OAuth2Scopes">
            <summary>
            The scopes that are required for this invocation - default is "SolidRpc"
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.RedirectUnauthorizedIdentity">
            <summary>
            Specifies if unauthorized identities should be redirected to the authorization endpoint instead of 
            raising UnauthorizedException.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityOAuth2Config.OAuthProxyInvocationPrincipal">
            <summary>
            Which authorization should be used when invoking proxies.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISecurityPathClaimConfig">
            <summary>
            Configures the required security claim neede to
            invoke the operation.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig">
            <summary>
            Interface used to determine how the azure function
            settings should be.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig.HttpAuthLevel">
            <summary>
            The authorization level in the http protocol
            "anonymous", "admin", "function"
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3">
            <summary>
            We nned the advice for the configuration...
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TMethod"></typeparam>
            <typeparam name="TAdvice"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3.Configure(SolidRpc.Abstractions.OpenApi.Proxy.ISolidAzureFunctionConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.SolidAzureFunctionAdvice`3.Handle(System.Func{System.Threading.Tasks.Task{`2}},SolidProxy.Core.Proxy.ISolidProxyInvocation{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig">
            <summary>
            Configures the bindings for the rpc proxy.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.OpenApiSpec">
            <summary>
            Sets the open api specification to use. If not set the specification matching
            the method name or assembly name where the method is defined will be used.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig.ProxyTransportType">
            <summary>
            The proxy transport type. If not explicitly configured the "Http" transport
            will be used for remote implementations and the "Local" transport for proxes that 
            are registerd in the IoC container.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions">
            <summary>
            Extension methods to manipulate the settings
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.GetTransports(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Sets the method address transformer on the transports
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.ConfigureTransport``1(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Configures the forwarding transport used in the invoker.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetProxyTransportType``1(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Configures the ProxyTransport type.
            </summary>
            <typeparam name="TTransport"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetInvokerTransport``2(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Configures the forwarding transport used in the invoker.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetRateLimit(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.String,System.TimeSpan)">
            <summary>
            Sets the rate limit on this configuration.
            <code>
            var rateLimitConfig = config.GetAdviceConfig&lt;ISolidRpcRateLimitConfig&gt;();
            rateLimitConfig.ResourceName = resourceName;
            rateLimitConfig.Timeout = timeout;
            </code>
            </summary>
            <param name="config"></param>
            <param name="resourceName"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetSecurityKey(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.String,System.String)">
            <summary>
            Sets the securitykry
            </summary>
            <param name="config"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetSecurityKey(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.String)">
            <summary>
            Sets the securitykry
            </summary>
            <param name="config"></param>
            <param name="value"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetSecurityKey(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Sets the securitykey
            </summary>
            <param name="config"></param>
            <param name="securityKey"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetOAuth2Security(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.String)">
            <summary>
            Sets the OAuth2 security configuration
            </summary>
            <param name="config"></param>
            <param name="authority"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetOAuth2ClientSecurity(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.String,System.String,System.String,System.String[])">
            <summary>
            Sets the OAuth2 security configuration
            </summary>
            <param name="config"></param>
            <param name="authority"></param>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="scopes"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.SetOAuth2ProxySecurity(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Sets the OAuth2 security configuration
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfigExtensions.DisableSecurity(SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Sets the securitykey
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcRateLimitConfig">
            <summary>
            Interface used to configure the rate limits for an invocation
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcRateLimitConfig.ResourceName">
            <summary>
            The resource name to use for the rate limiting scheme
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcRateLimitConfig.Timeout">
            <summary>
            The amount of time to wait for the resource to become available.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Proxy.OAuthProxyInvocationPrincipal">
            <summary>
            The principal to select when invoking methods
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Proxy.OAuthProxyInvocationPrincipal.None">
            <summary>
            Do not pass along the authorization header
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Proxy.OAuthProxyInvocationPrincipal.Client">
            <summary>
            Use the client jwt token when invoking proxies
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Proxy.OAuthProxyInvocationPrincipal.Proxy">
            <summary>
            Proxy the frontend user.
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.OpenApi.Proxy.OAuthProxyInvocationPrincipal.Delegate">
            <summary>
            Delegate the frontend user to the backend call.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransport">
            <summary>
            Represents the settings for the http transport
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransport.BaseAddress">
            <summary>
            The base address of the method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransport.Path">
            <summary>
            The path relative to the base method.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransport.MethodAddressTransformer">
            <summary>
            The method to transform the Uri. This delegate is invoked to determine
            the base Uri for the service. Supplied uri is the one obtained from
            the openapi config.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransportExtensions">
            <summary>
            Extension methods for the transport
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.IHttpTransportExtensions.SetMethodAddressTransformer(SolidRpc.Abstractions.OpenApi.Transport.IHttpTransport,SolidRpc.Abstractions.OpenApi.Transport.MethodAddressTransformer)">
            <summary>
            Sets the method address transformer on the transports
            </summary>
            <param name="t"></param>
            <param name="methodAddressTransformer"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.ILocalTransport">
            <summary>
            Represents the settings for the local transport
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransport">
            <summary>
            Represents the settings for the queue transport
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransport.QueueName">
            <summary>
            Returns the qeueue name
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransport.ConnectionName">
            <summary>
            Returns the connection name to use(key in configuration)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransport.InboundHandler">
            <summary>
            Specifies the inbound message handler. If this string is empty
            then no message handler wiil be configured for the client. 
            "azfunction" - means that the azure functions should pickup messages
            "generic" - means that we register a generic message handler for service bus.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransportExtensions">
            <summary>
            Extension methods for the transport
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransportExtensions.SetConnectionName``1(``0,System.String)">
            <summary>
            Sets the queue transport options
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransportExtensions.SetQueueName``1(``0,System.String)">
            <summary>
            Sets the queue transport options
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.IQueueTransportExtensions.SetInboundHandler``1(``0,System.String)">
            <summary>
            Sets the inbound handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="inboundHandler"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.ITransport">
            <summary>
            Base definition for a transport
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.ITransport.InvokerTransport">
            <summary>
            The transport that we use when the invoker receives
            a call on this transport.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.ITransport.OperationAddress">
            <summary>
            The operation address
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.ITransport.MessagePriority">
            <summary>
            The message priority
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.ITransport.PreInvokeCallback">
            <summary>
            The pre invoke callback
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApi.Transport.ITransport.PostInvokeCallback">
            <summary>
            The post invoke callback
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions">
            <summary>
            Extension methods for the transport
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.GetTransportType(System.Type)">
            <summary>
            Returns the transport type for supplied type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.GetTransportInterface(SolidRpc.Abstractions.OpenApi.Transport.ITransport)">
            <summary>
            Returns the transport type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.GetTransportType(SolidRpc.Abstractions.OpenApi.Transport.ITransport)">
            <summary>
            Returns the transport type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.GetInvocationOrdinal(SolidRpc.Abstractions.OpenApi.Transport.ITransport)">
            <summary>
            Returns the ordinal for supplied transport
            </summary>
            <param name="transport"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.SetMessagePriority``1(``0,System.Int32)">
            <summary>
            Sets the pre invoke callback on the http transport
            </summary>
            <param name="t"></param>
            <param name="priority"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.AddHttpTransportPreInvokeCallback``1(``0,System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpRequest,System.Threading.Tasks.Task})">
            <summary>
            Sets the pre invoke callback on the http transport
            </summary>
            <param name="t"></param>
            <param name="preInvokeCallback"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.OpenApi.Transport.ITransportExtensions.AddHttpTransportPostInvokeCallback``1(``0,System.Func{SolidRpc.Abstractions.OpenApi.Http.IHttpResponse,System.Threading.Tasks.Task})">
            <summary>
            Sets the pre invoke callback on the http transport
            </summary>
            <param name="t"></param>
            <param name="postInvokeCallback"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApi.Transport.MethodAddressTransformer">
            <summary>
            The method used to transform uri:s
            </summary>
            <param name="serviceProvider"></param>
            <param name="originalUri"></param>
            <param name="methodInfo">The method to resolve the uri for(may be null)</param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication">
            <summary>
            Implements some basic features of the application
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.HostId">
            <summary>
            The host id - unique for each IoC container setup.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.Started">
            <summary>
            The datetime when this application was started.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.ShutdownToken">
            <summary>
            Returns a token that will be cancelled when the application shuts down.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.AddStartupTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a startup task that we should wait for before starting to interact with the application.
            </summary>
            <param name="startupTask"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.AddStartupCallback(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a shutdown callback
            </summary>
            <param name="startupCallback"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.AddShutdownCallback(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a shutdown callback
            </summary>
            <param name="shutdownCallback"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.WaitForStartupTasks">
            <summary>
            Ensures that all the startup tasks have completed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcApplication.StopApplication">
            <summary>
            Stops this application
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.ISolidRpcAuthorization">
            <summary>
            Implements the logic for authorization
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcAuthorization.CurrentPrincipal">
            <summary>
            Gets / sets the current principal
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcAuthorization.ClientId">
            <summary>
            Returns the "client_id" claim from current principal
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcAuthorization.SessionId">
            <summary>
            Returns the "session_id" claim from current principal
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.ISolidRpcContentStore">
            <summary>
            The implementation of this interface is a singleton service
            that provides access to static content. 
            
            Static resources may be configured(added) during setup of the IoC container.
            
            If no path prefix is specified all the registered paths for the assembly are used at
            runtime to determine if the content should be delivered.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContentStore.AddContent(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Adds a content mapping. 
            </summary>
            <param name="contentAssembly">The assebly that contains the content</param>
            <param name="assemblyRelativeName">The string to append to the name of the assembly. All resoures that start with that name are added</param>
            <param name="pathPrefix">The absolute path to use to obtain the content.</param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContentStore.AddContent(System.Reflection.Assembly,System.String,System.Reflection.Assembly)">
            <summary>
            Adds a content mapping. 
            </summary>
            <param name="contentAssembly">The assebly that contains the content</param>
            <param name="assemblyRelativeName">The string to append to the name of the assembly. All resoures that start with that name are added</param>
            <param name="apiAssembly">The interface assembly containing the openapi spec.</param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContentStore.AddMapping(System.String,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{System.Uri}},System.Boolean)">
            <summary>
            Use this method to expose a static path to a dynamic resource.
            </summary>
            <param name="path"></param>
            <param name="mapping"></param>
            <param name="isRedirect"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken">
            <summary>
            Represents a continuation token.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken.Token">
            <summary>
            The continuation token
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken.GetToken``1">
            <summary>
            Returns the token
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken.SetToken``1(``0)">
            <summary>
            Returns the token
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationTokenExtensions">
            <summary>
            Extension methods for the token
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationTokenExtensions.ContinuationToken">
            <summary>
            The continuation token
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationTokenExtensions.GetHttpHeaderName(SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken)">
            <summary>
            Returns the http header name for the continuation token
            </summary>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationTokenExtensions.PushToken(SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken)">
            <summary>
            Pushes the token
            </summary>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationTokenExtensions.LoadToken(SolidRpc.Abstractions.InternalServices.ISolidRpcContinuationToken)">
            <summary>
            Pushes the token
            </summary>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.SolidRpcApplication">
            <summary>
            Implements the solid application logic
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.ShutdownToken">
            <summary>
            Returns the shutdown token
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.HostId">
            <summary>
            The host id
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.Started">
            <summary>
            The startup time
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.AddShutdownCallback(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a shutdown callback
            </summary>
            <param name="shutdownCallback"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.AddStartupCallback(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a startup callback
            </summary>
            <param name="startupCallback"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.AddStartupTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a startup task
            </summary>
            <param name="startupTask"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.Dispose">
            <summary>
            Dispses the application
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.StopApplication">
            <summary>
            Stops the application
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcApplication.WaitForStartupTasks">
            <summary>
            Invoked to wait for all the startup tasks to complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.InternalServices.SolidRpcAuthorization">
            <summary>
            Implements the solid authorization logic
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.InternalServices.SolidRpcAuthorization.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcAuthorization.CurrentPrincipal">
            <summary>
            The current principal
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcAuthorization.ClientId">
            <summary>
            The client id
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.InternalServices.SolidRpcAuthorization.SessionId">
            <summary>
            The session id.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.OpenApiAttribute">
            <summary>
            Configures the openapi
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApiAttribute.Name">
            <summary>
            The name of the method or parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApiAttribute.In">
            <summary>
            Where should the parameter be put.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApiAttribute.Verbs">
            <summary>
            The verbs to use.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApiAttribute.Path">
            <summary>
            The path to bind.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.OpenApiAttribute.CollectionFormat">
            <summary>
            The separator to use in lists
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SecurityAttribute">
            <summary>
            The security attribute defines what permissions that are required to
            accesss the data in these interfaces
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.SecurityAttribute.#ctor(System.String[])">
            <summary>
            The permissions required to access this resource
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.SecurityAttribute.Public">
            <summary>
            Specifies if this resource is public(ie no permissions required)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SecurityAttribute.Permissions">
            <summary>
            The permissions required to access this resource
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Security.SolidRpcHostPermission">
            <summary>
            This permission grants access to some of the solid rpc host functionality.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Serialization.ISerializer">
            <summary>
            Defines the logic to serialize object into a wire format 
            such as xml or json.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.ISerializer.SerializerSettings">
            <summary>
            Returns the settings for this serializer
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializer.Serialize(System.IO.Stream,System.Type,System.Object)">
            <summary>
            Serializes an object of specified type.
            </summary>
            <param name="stream"></param>
            <param name="type"></param>
            <param name="o"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializer.Deserialize(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="stream"></param>
            <param name="type"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Serialization.ISerializerFactory">
            <summary>
            Implements logic to create seralizers.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.ISerializerFactory.DefaultSerializerSettings">
            <summary>
            The settings that are supplied to the serializers
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.GetSerializer(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Gets the serializer for suplied media type.
            </summary>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToStream``1(System.IO.Stream,``0,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromStream``1(System.IO.Stream,``0@,System.String,System.Text.Encoding)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToString``1(System.String@,``0,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromString``1(System.String,``0@,System.String,System.Text.Encoding)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToString(System.String@,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromString(System.String,System.Type,System.Object@,System.String,System.Text.Encoding)">
            <summary>
            Deserializes an object from a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToStream(System.IO.Stream,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Serializes supplied object to a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@,System.String,System.Text.Encoding)">
            <summary>
            Deserializes an object from a string representation
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToFileType(System.Object,System.Type,System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes an object to a file instance type.
            </summary>
            <param name="fileTypeInstance"></param>
            <param name="type"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.SerializeToFileType``1(System.Object,``0,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileTypeInstance"></param>
            <param name="o"></param>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="prettyFormat"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.ISerializerFactory.DeserializeFromFileType``1(System.Object,``0@)">
            <summary>
            Writes an object to a file instance type.
            </summary>
            <param name="fileTypeInstance"></param>
            <param name="o"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.Serialization.SerializerSettings">
            <summary>
            Represents the serializer settings
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Serialization.SerializerSettings.Default">
            <summary>
            The default serializer settings
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.SerializerSettings.#ctor(System.String,System.Text.Encoding,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Constructs a new instance
            </summary>
            <param name="contentType"></param>
            <param name="charSet"></param>
            <param name="defaultTimeZone"></param>
            <param name="prettyPrint"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.SerializerSettings.UniqueKey">
            <summary>
            The unique key tata identifies this settings
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.SerializerSettings.ContentType">
            <summary>
            Returns the content type for this serializer
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.SerializerSettings.CharSet">
            <summary>
            The charset for this serializer
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.SerializerSettings.DefaultTimeZone">
            <summary>
            The default time zone to use when deserializing dates.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Serialization.SerializerSettings.PrettyPrint">
            <summary>
            Should the formatting be pretty - defaults to false
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.SerializerSettings.SetContentType(System.String)">
            <summary>
            Sets the content type of the settings
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.SerializerSettings.SetCharSet(System.Text.Encoding)">
            <summary>
            Sets the charset of the settings
            </summary>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.SerializerSettings.SetPrettyPrint(System.Boolean)">
            <summary>
            Sets the pretty print of the settings
            </summary>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Serialization.SerializerSettings.SetDefaultTimeZone(System.TimeZoneInfo)">
            <summary>
            Sets the default time zone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.Code.ICodeNamespaceGenerator">
            <summary>
            instance responsible for generating code structures
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.Code.ICodeNamespaceGenerator.CreateCodeNamespace(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a code namespace for supplied assembly name
            </summary>
            <param name="assemblyName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.Code.INpmGenerator">
            <summary>
            The npm generator
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.Code.INpmGenerator.CreateNpmPackage(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns the files that should be stored in the node_modules directory
            </summary>
            <param name="assemblyNames">The name of the assemblies to create an npm package for.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.Code.INpmGenerator.CreateInitialZip(System.Threading.CancellationToken)">
            <summary>
            Returns a zip containing the code to get started
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.Code.ITypescriptGenerator">
            <summary>
            instance responsible for generating code structures
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.Code.ITypescriptGenerator.CreateTypesTsForAssemblyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a types.ts file from supplied assembly name
            </summary>
            <param name="assemblyName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.Code.ITypescriptGenerator.CreateTypesTsForCodeNamespaceAsync(SolidRpc.Abstractions.Types.Code.CodeNamespace,System.Threading.CancellationToken)">
            <summary>
            Creates a types.ts file from supplied code namespace
            </summary>
            <param name="codeNamespace"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcContentHandler">
            <summary>
            The content handler uses the ISolidRpcContentStore to deliver static or proxied content.
            
            This handler can be invoked from a configured proxy or mapped directly in a .Net Core Handler.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.GetContent(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the content for supplied path.
            
            Note that the path is marked as optional(default value set). This is so that the parameter
            is placed in the query string instead of path.
            </summary>
            <param name="path">The path to get the content for</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.PathPrefixes">
            <summary>
            Returns all the path prefixes. If content is added by using relative
            paths then all the assemly base paths are returned from this property.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcContentHandler.GetPathMappingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all the path mappings.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcHost">
            <summary>
            Represents a solid rpc host.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.GetHostId(System.Threading.CancellationToken)">
            <summary>
            Returns the id of this host
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.GetHostInstance(System.Threading.CancellationToken)">
            <summary>
            Returns the id of this host. This method can be used to determine if a host is up and running by
            comparing the returned value with the instance that we want to send to. If a host goes down it is 
            removed from the router and another instance probably responds to the call.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.SyncHostsFromStore(System.Threading.CancellationToken)">
            <summary>
            This method is invoked on all the hosts in a store when a new host is available.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.CheckHost(SolidRpc.Abstractions.Types.SolidRpcHostInstance,System.Threading.CancellationToken)">
            <summary>
            Invokes the "GetHostInstance" targeted for supplied instance and resturns the result
            </summary>
            <param name="hostInstance"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.GetHostConfiguration(System.Threading.CancellationToken)">
            <summary>
            Returns the host configuration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.IsAlive(System.Threading.CancellationToken)">
            <summary>
            Function that determines if the host is alive.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.BaseAddress(System.Threading.CancellationToken)">
            <summary>
            Returns the base url for this host
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHost.AllowedCorsOrigins(System.Threading.CancellationToken)">
            <summary>
            Returns the list of allowed cors origins.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcHostStore">
            <summary>
            The host store is responsible for storing persistent information about 
            a host in a cluster. Usually hosts are placed behind a load balancer that
            can route to a specific host based on some cookie or header information.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHostStore.AddHostInstanceAsync(SolidRpc.Abstractions.Types.SolidRpcHostInstance,System.Threading.CancellationToken)">
            <summary>
            Adds a host instance to the host store.
            </summary>
            <param name="hostInstance"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHostStore.RemoveHostInstanceAsync(SolidRpc.Abstractions.Types.SolidRpcHostInstance,System.Threading.CancellationToken)">
            <summary>
            Removes a host instance from the store.
            </summary>
            <param name="hostInstance"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcHostStore.ListHostInstancesAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the stored host instances
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcMethodStore">
            <summary>
            Implements the logic to get and store invocations for a user/session
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcMethodStore.GetHttpRequestAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Returns the http requests for the current user.
            </summary>
            <param name="takeCount"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcMethodStore.RemoveHttpRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the http request for the current user.
            </summary>
            <param name="solidRpcCallId"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcMethodStore.GetHttpRequestsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Returns the next http requests for supplied session
            </summary>
            <param name="sessionId"></param>
            <param name="takeCount"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcMethodStore.RemoveHttpRequestAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the http request 
            </summary>
            <param name="sessionId"></param>
            <param name="solidRpcCallId"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcOAuth2">
            <summary>
            Interfaces that defines the logic for OAuth2 support.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOAuth2.GetAuthorizationCodeTokenAsync(System.Uri,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            This method returns a html page that authorizes the user. When the user
            has been authorized the supplied callback is invoked with the "access_token"
            supplied as a query parameter along with the "state".
            
            Use this method to retreive tokens from a standalone node instance or from a SPA(single page app)
            
            Start a local http server and supply the address to the handler.
            </summary>
            <param name="callbackUri">the callback</param>
            <param name="state">the state</param>
            <param name="scopes">the scopes</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOAuth2.TokenCallbackAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This is the method that is invoked when a user has been authenticated
            and a valid token is supplied. The authentication uses the "authorization code" flow
            so this method retreives the access token using supplied code.
            </summary>
            <param name="code">code token to use</param>
            <param name="state">the state</param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOAuth2.RefreshTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to refresh a token obtained from the callback.
            
            This method fetches a new token from the OAuth server using the refresh token stored as a cookie when authorizing for the first time.
            </summary>
            <param name="accessToken">the token to refresh - may be an expired token</param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOAuth2.LogoutAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Performs the logout @ the identity server.
            </summary>
            <param name="callbackUri"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.ISolidRpcOidc">
            <summary>
            Implements logic for the oidc server
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOidc.GetDiscoveryDocumentAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the /.well-known/openid-configuration file
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOidc.GetKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the keys
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOidc.GetTokenAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            authenticates a user
            </summary>
            <param name="grantType">The the grant type</param>
            <param name="clientId">The the client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="username">The user name</param>
            <param name="password">The the user password</param>
            <param name="scope">The the scopes</param>
            <param name="code">The the code</param>
            <param name="redirectUri">The the redirect uri</param>
            <param name="codeVerifier">The the code verifier</param>
            <param name="refreshToken">The the refresh token</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOidc.AuthorizeAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            authorizes a user
            </summary>
            <param name="scope">REQUIRED. OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 for additional scope values defined by this specification.</param>
            <param name="responseType">REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.</param>
            <param name="clientId">REQUIRED. OAuth 2.0 Client Identifier valid at the Authorization Server.</param>
            <param name="redirectUri">REQUIRED. Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison). When using this flow, the Redirection URI SHOULD use the https scheme; however, it MAY use the http scheme, provided that the Client Type is confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP allows the use of http Redirection URIs in this case. The Redirection URI MAY use an alternate scheme, such as one that is intended to identify a callback into a native application.</param>
            <param name="state">RECOMMENDED. Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.</param>
            <param name="responseMode">The Response Mode determines how the Authorization Server returns result parameters from the Authorization Endpoint. Non-default modes are specified using the response_mode request parameter. If response_mode is not present in a request, the default Response Mode mechanism specified by the Response Type is used.</param>
            <param name="nonce">OPTIONAL. String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. For implementation notes, see Section 15.5.2.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.ISolidRpcOidc.RevokeAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            revokes a token
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="token"></param>
            <param name="tokenHint"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit">
            <summary>
            Service that we can invoke to throttle requests.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit.GetRateLimitTokenAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Returns the rate limit token.
            </summary>
            <param name="resourceName"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit.GetSingeltonTokenAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Returns the singelton token for supplied key. This call implies a rate limit setting of max 1 concurrent call.
            </summary>
            <param name="resourceName"></param>
            <param name="timeout"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit.ReturnRateLimitTokenAsync(SolidRpc.Abstractions.Types.RateLimit.RateLimitToken,System.Threading.CancellationToken)">
            <summary>
            Returns a rate limit token.
            </summary>
            <param name="rateLimitToken"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit.GetRateLimitSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the rate limit settings
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Services.RateLimit.ISolidRpcRateLimit.UpdateRateLimitSetting(SolidRpc.Abstractions.Types.RateLimit.RateLimitSetting,System.Threading.CancellationToken)">
            <summary>
            Updates the rate limit settings
            </summary>
            <param name="setting"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcConstants">
            <summary>
            Contains some constants 
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcConstants.OpenApiWordSeparators">
            <summary>
            characters to be used when splittung up words in a openapi spec
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcServiceLifetime">
            <summary>
            The lifetime of the service
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcServiceLifetime.Singleton">
            <summary>
            Should the service be registered as a singleton
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcServiceLifetime.Scoped">
            <summary>
            Should the service be scoped
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcServiceLifetime.Transient">
            <summary>
            Create an instance every time the service is resolved
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcServiceInstances">
            <summary>
            The lifetime of the service
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcServiceInstances.One">
            <summary>
            We only resolve one intance at a time
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.SolidRpcServiceInstances.Many">
            <summary>
            There may be many implementation types
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.SolidRpcServiceAttribute">
            <summary>
            Attribute that can be set on the SolidRpc hosting assemblies to define the 
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.SolidRpcServiceAttribute.#ctor(System.Type,System.Type,SolidRpc.Abstractions.SolidRpcServiceLifetime,SolidRpc.Abstractions.SolidRpcServiceInstances)">
            <summary>
            Constructs a new attribute
            </summary>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
            <param name="serviceLifetime"></param>
            <param name="serviceInstances"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcServiceAttribute.ServiceType">
            <summary>
            The interface type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcServiceAttribute.ImplementationType">
            <summary>
            The implementation type.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcServiceAttribute.ServiceLifetime">
            <summary>
            The service lifetime
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.SolidRpcServiceAttribute.ServiceInstances">
            <summary>
            The service lifetime
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeInterface">
            <summary>
            Represents an interface
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeInterface.Description">
            <summary>
            The description of this interface
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeInterface.Name">
            <summary>
            The name of this interface
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeInterface.Methods">
            <summary>
            The methods in the interface
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeMethod">
            <summary>
            Represents a method
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.Description">
            <summary>
            A description of the the method
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.Name">
            <summary>
            The name of this method
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.Arguments">
            <summary>
            The method arguments
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.ReturnType">
            <summary>
            The return type of the method(fully qualified)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.HttpMethod">
            <summary>
            The http method(GET,POST,etc.)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.HttpBaseAddress">
            <summary>
            The base address to this method
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethod.HttpPath">
            <summary>
            The http path relative to the base address
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeMethodArg">
            <summary>
            Represents a method argument
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.Description">
            <summary>
            A description of the the argument
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.Name">
            <summary>
            The name of the argument
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.ArgType">
            <summary>
            The argument type(fully qualified)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.Optional">
            <summary>
            Specifies if this argument is optional(not required)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.HttpName">
            <summary>
            The name of the argument in the http protocol.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeMethodArg.HttpLocation">
            <summary>
            The location of the argument(&#39;path&#39;, &#39;query&#39;, &#39;header&#39;, &#39;body&#39;, &#39;body-inline&#39;)
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeNamespace">
            <summary>
            represents a namespace
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeNamespace.Name">
            <summary>
            The name of this namespace part(not fully qualified).
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeNamespace.Namespaces">
            <summary>
            The namespaces within this namespace
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeNamespace.Interfaces">
            <summary>
            The interfaces within this namespace
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeNamespace.Types">
            <summary>
            The types within this namespace
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeType">
            <summary>
            Represents a type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeType.Description">
            <summary>
            A description of the the type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeType.Name">
            <summary>
            The name of the type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeType.Extends">
            <summary>
            The type that this type extends
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeType.Properties">
            <summary>
            The method arguments
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.CodeTypeProperty">
            <summary>
            Represents a property in a type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeTypeProperty.Description">
            <summary>
            A description of the the property
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeTypeProperty.Name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeTypeProperty.PropertyType">
            <summary>
            The property type(fully qualified)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.CodeTypeProperty.HttpName">
            <summary>
            The name of the property in the http protocol.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.NpmPackage">
            <summary>
            successful operation
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackage.Name">
            <summary>
            The package name(folder name)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackage.Files">
            <summary>
            The files within the package
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.NpmPackageFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageFile.FilePath">
            <summary>
            The file path within the package
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageFile.Content">
            <summary>
            The file content(binary content not supported)
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.Code.NpmPackageJson">
            <summary>
            Represents a package.json file
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.Code.NpmPackageJson.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Name">
            <summary>
            The name of the package
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Version">
            <summary>
            The version of the package
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Description">
            <summary>
            The description of the package
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Main">
            <summary>
            The main entry
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Types">
            <summary>
            The types entry
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.License">
            <summary>
            The license
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Dependencies">
            <summary>
            The dependencies
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.Code.NpmPackageJson.Scripts">
            <summary>
            The scripts
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContent">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.Content">
            <summary>
            The file content.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.CharSet">
            <summary>
            The content charset
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.ContentType">
            <summary>
            The content type.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.LastModified">
            <summary>
            The last modified date of the resource.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.Location">
            <summary>
            The location of the content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.ETag">
            <summary>
            The ETag.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContent.SetCookie">
            <summary>
            The SetCookie.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContentNotFoundException">
            <summary>
            Raised when the file content is not found
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.FileContentNotFoundException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentNotFoundException.#ctor">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FileContentTemplate">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.PropertyTypes">
            <summary>
            The properties 
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.RequiredProps">
            <summary>
            The required properties
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.IsFileType(System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Determines if the supplied type is a file type based on the name and/or properties.
            </summary>
            <param name="typeName"></param>
            <param name="propertyTypes"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.GetTemplate(System.Type)">
            <summary>
            REturns the template spec for supplied type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance
            </summary>
            <param name="otherType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FileContentTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds support for plain streams
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetContent">
            <summary>
            Sets the content on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetContent">
            <summary>
            Gets the content from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetCharSet">
            <summary>
            Sets the charset on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetCharSet">
            <summary>
            Gets the charset from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetContentType">
            <summary>
            Sets the content type on the template  copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetContentType">
            <summary>
            Returns the content type from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetFileName">
            <summary>
            Sets the filename on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetFileName">
            <summary>
            Returns the filename from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetLastModified">
            <summary>
            Sets the last modified on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetLastModified">
            <summary>
            Returns the last modified from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetLocation">
            <summary>
            Sets the location in the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetLocation">
            <summary>
            Returns the location from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetETag">
            <summary>
            Sets the etag in the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetETag">
            <summary>
            Returns the etag from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.SetSetCookie">
            <summary>
            Sets the set cookie in the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.FileContentTemplate.GetSetCookie">
            <summary>
            Returns the set cookie from the template copy
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.FoundException">
            <summary>
            Raised when we want to send a redirect
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.FoundException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.FoundException.#ctor(System.Uri)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.HttpRequest">
            <summary>
            Represents a HttpRequest. We can use this type to create dynamic invocation
            handlers that intercepts all the data sent to it.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Method">
            <summary>
            The method(GET,POST,PUT,etc)
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Uri">
            <summary>
            The uri
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Headers">
            <summary>
            The headers
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequest.Body">
            <summary>
            The body.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.HttpRequestExtensions">
            <summary>
            The request extensions
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestExtensions.SetHeader(SolidRpc.Abstractions.Types.HttpRequest,System.String,System.String)">
            <summary>
            Sets the header value
            </summary>
            <param name="httpRequest"></param>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestExtensions.GetHeader(SolidRpc.Abstractions.Types.HttpRequest,System.String)">
            <summary>
            Returns the header value
            </summary>
            <param name="httpRequest"></param>
            <param name="headerName"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestExtensions.SetSolidRpcCallId(SolidRpc.Abstractions.Types.HttpRequest,System.String)">
            <summary>
            Sets the solid rpc call id
            </summary>
            <param name="httpRequest"></param>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestExtensions.GetSolidRpcCallId(SolidRpc.Abstractions.Types.HttpRequest)">
            <summary>
            Sets the solid rpc call id
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.HttpRequestTemplate">
            <summary>
            Represents a file content
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.PropertyTypes">
            <summary>
            The properties 
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.RequiredProps">
            <summary>
            The required properties
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetTemplate(System.Type)">
            <summary>
            Returns the template spec for supplied type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.IsHttpRequestType(System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Returns true if specified information matches a http request type.
            </summary>
            <param name="typeName"></param>
            <param name="propertyTypes"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Ensures that out type has correct name.
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.HttpRequestTemplate.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance
            </summary>
            <param name="otherType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetMethod">
            <summary>
            Sets the method on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetMethod">
            <summary>
            Gets the conmethodtent from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetUri">
            <summary>
            Sets the uri on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetUri">
            <summary>
            Gets the uri from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetHeaders">
            <summary>
            Sets the headers on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetHeaders">
            <summary>
            Gets the headers from the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.SetBody">
            <summary>
            Sets the query on the template copy
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.HttpRequestTemplate.GetBody">
            <summary>
            Gets the query from the template copy
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.NameValuePair">
            <summary>
            Represents a name/value pair
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.NameValuePair.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.NameValuePair.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery">
            <summary>
            Represents a discovery document.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.Issuer">
            <summary>
            REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier. If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.AuthorizationEndpoint">
            <summary>
            REQUIRED. URL of the OP&#39;s OAuth 2.0 Authorization Endpoint [OpenID.Core].
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.TokenEndpoint">
            <summary>
            URL of the OP&#39;s OAuth 2.0 Token Endpoint [OpenID.Core]. This is REQUIRED unless only the Implicit Flow is used.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.UserinfoEndpoint">
            <summary>
            RECOMMENDED. URL of the OP&#39;s UserInfo Endpoint [OpenID.Core]. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.RevocationEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.DeviceAuthorizationEndpoint">
            <summary>
            OPTIONAL. URL of the authorization server&#39;s device authorization endpoint defined in Section 3.1.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.JwksUri">
            <summary>
            REQUIRED. URL of the OP&#39;s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server&#39;s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.ScopesSupported">
            <summary>
            RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used, although those defined in [OpenID.Core] SHOULD be listed, if supported.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.GrantTypesSupported">
            <summary>
            OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. Dynamic OpenID Providers MUST support the authorization_code and implicit Grant Type values and MAY support other Grant Types. If omitted, the default value is [&quot;authorization_code&quot;, &quot;implicit&quot;]&quot;
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.ResponseModesSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.SubjectTypesSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.IdTokenSigningAlgValuesSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.EndSessionEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.ResponseTypesSupported">
            <summary>
            REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.ClaimsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.TokenEndpointAuthMethodsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.CodeChallengeMethodsSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.RequestUriParameterSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.HttpLogoutSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.FrontchannelLogoutSupported">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.RbacUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.MsgraphHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.CloudGraphHostName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.CloudInstanceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDConnectDiscovery.TenantRegionScope">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey">
            <summary>
            Represents a key
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.Alg">
            <summary>
            (Algorithm) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.Kty">
            <summary>
            (Key Type) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.Use">
            <summary>
            (Public Key Use) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.Kid">
            <summary>
            (Key ID) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.X5u">
            <summary>
            (X.509 URL) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.X5t">
            <summary>
            (X.509 Certificate SHA-1 Thumbprint) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.X5c">
            <summary>
            (X.509 Certificate Chain) Parameter
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.N">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.E">
            <summary>
            
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKey.Issuer">
            <summary>
            
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.OAuth2.OpenIDKeys">
            <summary>
            Represents a set of keys
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.OpenIDKeys.Keys">
            <summary>
            The keys
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.OAuth2.TokenResponse">
            <summary>
            The response from a token request
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.TokenResponse.AccessToken">
            <summary>
            REQUIRED.  The access token issued by the authorization server.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.TokenResponse.TokenType">
            <summary>
            REQUIRED.  The type of the token issued as described in Section 7.1.  Value is case insensitive.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.TokenResponse.ExpiresIn">
            <summary>
            RECOMMENDED.  The lifetime in seconds of the access token.  For example, the value &#39;3600&#39; denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.TokenResponse.RefreshToken">
            <summary>
            OPTIONAL.  The refresh token, which can be used to obtain new access tokens using the same authorization grant as describedin Section 6.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.OAuth2.TokenResponse.Scope">
            <summary>
            OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED.  The scope of the access token as described by Section 3.3.
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.RateLimitExceededException">
            <summary>
            Raised when the rate limit has been exceeded
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.RateLimitExceededException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.RateLimitExceededException.#ctor">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.RateLimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.RateLimit.RateLimitSetting">
            <summary>
            Specifies the rate limit settings for the specified resource
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.RateLimit.RateLimitSetting.ResourceName">
            <summary>
            The name of the resource.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.RateLimit.RateLimitSetting.MaxConcurrentCalls">
            <summary>
            If set specifies the maximum number of concurrent calls
            there can be to the resource
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.RateLimit.RateLimitToken">
            <summary>
            Token returned from a resource request
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.RateLimit.RateLimitToken.ResourceName">
            <summary>
            The name of the resource.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.RateLimit.RateLimitToken.Id">
            <summary>
            The unique id of this token. This guid may be empty if no token
            was issued from the service.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.RateLimit.RateLimitToken.Expires">
            <summary>
            The time when the token expires
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.SolidRpcHostInstance">
            <summary>
            Represents a solid rpc host.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.SolidRpcHostInstance.HostId">
            <summary>
            The unique id of this host. This id is regenerated every time a 
            new memory context is created
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.SolidRpcHostInstance.Started">
            <summary>
            The time this host was started.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.SolidRpcHostInstance.LastAlive">
            <summary>
            The last time this host was alive. This field is set(and returned) when a client
            invokes the ISolidRpcHost.GetHostInstance.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.SolidRpcHostInstance.BaseAddress">
            <summary>
            The base address of this host
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.Types.SolidRpcHostInstance.HttpCookies">
            <summary>
            The cookie to set in order to reach this host
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.Types.UnauthorizedException">
            <summary>
            Raised when the the method invocation is not allowed
            </summary>
        </member>
        <member name="F:SolidRpc.Abstractions.Types.UnauthorizedException.HttpStatusCode">
            <summary>
            The http status code
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.UnauthorizedException.#ctor">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.Types.UnauthorizedException.#ctor(System.String)">
            <summary>
            Constructs a new exception
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.TypeTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate.#ctor(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new instance
            </summary>
            <param name="templateType"></param>
            <param name="templatedType"></param>
            <param name="requiredProps"></param>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate.HandleTemplateType(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds support for subclasses to override logic.
            </summary>
            <param name="templateType"></param>
            <param name="otherType"></param>
            <param name="isTemplateType"></param>
            <returns></returns>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.IsTemplateType">
            <summary>
            Returns true if this is a template type.
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.TemplateType">
            <summary>
            The templated type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.TemplatedType">
            <summary>
            The templated type
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.Templated2TemplateType">
            <summary>
            Sets the properties on one object
            </summary>
        </member>
        <member name="P:SolidRpc.Abstractions.TypeTemplate.Template2TemplatedType">
            <summary>
            Sets the properties on another object
            </summary>
        </member>
        <member name="T:SolidRpc.Abstractions.TypeTemplate`1">
            <summary>
            The type template can be used to access similar types.
            </summary>
            <typeparam name="TTemplate"></typeparam>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate`1.GetTemplate(System.Type,System.Func{System.Type,SolidRpc.Abstractions.TypeTemplate{`0}})">
            <summary>
            Returns the template for supplied type.
            </summary>
            <param name="type"></param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate`1.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:SolidRpc.Abstractions.TypeTemplate`1.CopyToTemplatedInstance(`0)">
            <summary>
            Copies the information in a template instance to a templated instance.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions">
            <summary>
            Extension methods for the solidrpc logic
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSingletonIfMissing``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the service if type is missing in the collection.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSingletonIfMissing``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds the factory if it is missing.
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="services"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Adds the rpc services
            </summary>
            <param name="services"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Returns the service provider for specified service.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="services"></param>
            <param name="mustExist"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Boolean)">
            <summary>
            Returns the service provider for specified service.
            </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <param name="mustExist"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.RegisterSingletonService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Registers a singleton service provider.
            </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <param name="implType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcSingletonServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the singleton services
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcContentStore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Returns the static content provider.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetSolidRpcOpenApiParser(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Returns the static content provider.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Reflection.Assembly,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures all the interfaces in supplied assembly
            </summary>
            <param name="sc"></param>
            <param name="interfaceAssembly"></param>
            <param name="implementationAssembly"></param>
            <param name="configurator"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="interfaze"></param>
            <param name="impl"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcRemoteBindings``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcRemoteBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="interfaze"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcSingletonBindings``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the supplied type so that it is exposed in the binder.
            </summary>
            <param name="sc"></param>
            <param name="impl"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddSolidRpcBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.MethodInfo,System.Func{SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig,System.Boolean})">
            <summary>
            Configures the suppllied method so that it is exposed through the .net core http binding.
            </summary>
            <param name="sc"></param>
            <param name="mi"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.SetSolidRpcSecurityKeyFromConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Sets the security key in supplied proxy config by getting the values from the configuration
            </summary>
            <param name="sc"></param>
            <param name="openApiProxyConfig"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.SetSolidRpcBaseUrlFromConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,SolidRpc.Abstractions.OpenApi.Proxy.ISolidRpcOpenApiConfig)">
            <summary>
            Sets the base url in supplied proxy config by getting the values from the configuration
            </summary>
            <param name="sc"></param>
            <param name="openApiProxyConfig"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.SetSolidRpcBaseUrlInConfig``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Uri)">
            <summary>
            Adds the base url of the service to the configuration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sc"></param>
            <param name="baseUrl"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.GetConfigurationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Microsoft.Extensions.Configuration.IConfigurationBuilder},System.Func{Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Configuration.IConfigurationSource})">
            <summary>
            Returns the configuration builder
            </summary>
            <param name="services"></param>
            <param name="ctor"></param>
            <param name="createSource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.BuildConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Returns the configuration builder
            </summary>
            <param name="services"></param>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Contains extension methods for the Type
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsFileContent(System.Type)">
            <summary>
            Returns true if the type is a binary template type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsHttpRequest(System.Type)">
            <summary>
            Returns true if the type is a HttpRequest template type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsEnumType(System.Type,System.Type@)">
            <summary>
            Returns true if the type is an enum
            </summary>
            <param name="type"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsTaskType(System.Type,System.Type@)">
            <summary>
            Returns true if supplied tyoe is a task type.
            </summary>
            <param name="type"></param>
            <param name="taskType"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullableType(System.Type,System.Type@)">
            <summary>
            Returns true if supplied type is a nullable type.
            </summary>
            <param name="type"></param>
            <param name="nullableType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
