{
  "swagger": "2.0",
  "info": {
    "title": "Oidc.IOidcServer",
    "version": "1.0.0",
    "description": "Defines logic for the oidc server"
  },
  "host": "localhost",
  "schemes": [
    "https"
  ],
  "basePath": "/SolidRpc/Security/Services/Oidc",
  "paths": {
    "/discovery": {
      "get": {
        "description": "Returns the /.well-known/openid-configuration file",
        "operationId": "OAuth2Discovery",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/OpenIDConnnectDiscovery"
            }
          }
        }
      }
    },
    "/keys": {
      "get": {
        "description": "Returns the keys",
        "operationId": "OAuth2Keys",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/OpenIDKeys"
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "description": "authenticates a user",
        "operationId": "OAuth2TokenGet",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/TokenResponse"
            }
          }
        }
      },
      "post": {
        "description": "authenticates a user",
        "operationId": "OAuth2TokenPost",
        "parameters": [
          {
            "in": "formData",
            "name": "grant_type",
            "description": "The the grant type",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "client_id",
            "description": "The the client id",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "client_secret",
            "description": "The client secret",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "username",
            "description": "The user name",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "password",
            "description": "The the user password",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "scope",
            "description": "The the scopes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "collectionFormat": "ssv"
            }
          },
          {
            "in": "formData",
            "name": "code",
            "description": "The the code",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "redirect_uri",
            "description": "The the redirect uri",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "code_verifier",
            "description": "The the code verifier",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "refresh_token",
            "description": "The the refresh token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/TokenResponse"
            }
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "description": "authorizes a user",
        "operationId": "OAuth2AuthorizeGet",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "description": "REQUIRED. OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 for additional scope values defined by this specification.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "collectionFormat": "ssv"
            }
          },
          {
            "in": "query",
            "name": "response_type",
            "description": "REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "client_id",
            "description": "REQUIRED. OAuth 2.0 Client Identifier valid at the Authorization Server.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "description": "REQUIRED. Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison). When using this flow, the Redirection URI SHOULD use the https scheme; however, it MAY use the http scheme, provided that the Client Type is confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP allows the use of http Redirection URIs in this case. The Redirection URI MAY use an alternate scheme, such as one that is intended to identify a callback into a native application.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "description": "RECOMMENDED. Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/WebContent"
            }
          }
        }
      },
      "post": {
        "description": "authorizes a user",
        "operationId": "OAuth2AuthorizePost",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "../CommonDefinitions.json#/definitions/WebContent"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Claim": {
      "type": "object",
      "description": "Represents a claim",
      "properties": {
        "name": {
          "description": "The name of the claim",
          "type": "string"
        },
        "value": {
          "description": "The value of the claim",
          "type": "string"
        }
      }
    }
  }
}